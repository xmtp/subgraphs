# XMTP Payer Portal - Settlement Chain (Base Sepolia) Schema

enum TransactionType {
  DEPOSIT
  WITHDRAWAL_REQUEST
  WITHDRAWAL_CANCEL
  WITHDRAWAL_FINALIZE
  USAGE_SETTLEMENT
}

enum WithdrawalStatus {
  PENDING
  READY
  CANCELLED
  FINALIZED
}

enum BridgeStatus {
  PENDING
  CONFIRMED
  READY_TO_CLAIM
  CLAIMED
}

type PayerRegistryTransaction @entity {
  id: ID! # txHash-logIndex
  type: TransactionType!
  payer: Bytes!
  amount: BigInt
  withdrawableTimestamp: BigInt
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  dailyStats: DailyPayerStats
}

type PayerBalance @entity {
  id: ID! # payer address
  payer: Bytes!
  currentBalance: BigInt! # @note: anything additional needed for debt?
  totalDeposited: BigInt!
  totalWithdrawn: BigInt!
  totalUsageSettled: BigInt!
  lastUpdatedBlock: BigInt!
  lastUpdatedTimestamp: BigInt!
  transactions: [PayerRegistryTransaction!]! @derivedFrom(field: "payerBalance")
  pendingWithdrawal: PendingWithdrawal @derivedFrom(field: "payerBalance")
  bridgeTransactions: [BridgeTransaction!]! @derivedFrom(field: "payerBalance")
}

type PendingWithdrawal @entity {
  id: ID! # payer address
  payer: Bytes!
  amount: BigInt!
  withdrawableTimestamp: BigInt!
  requestedAt: BigInt!
  requestTxHash: Bytes!
  status: WithdrawalStatus!
}

type RateUpdate @entity {
  id: ID! # txHash-logIndex
  messageFee: BigInt!
  storageFee: BigInt!
  congestionFee: BigInt!
  targetRatePerMinute: BigInt!
  # @note: would `totalCostPerBytes` be a more appropriate name?
  totalCostPerMessage: BigInt! # Calculated: messageFee + storageFee + congestionFee
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurrentRate @entity {
  id: ID! # "current"
  messageFee: BigInt!
  storageFee: BigInt!
  congestionFee: BigInt!
  targetRatePerMinute: BigInt!
  totalCostPerMessage: BigInt!
  lastUpdated: BigInt!
}

type BridgeTransaction @entity {
  id: ID! # txHash-logIndex for originating transaction
  payer: Bytes!
  amount: BigInt!
  status: BridgeStatus!
  transactionHash: Bytes!
  messageNum: BigInt!
  initiatedAt: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

# Per-payer daily statistics for analytics
type DailyPayerStats @entity {
  id: ID! # payerAddress-YYYY-MM-DD
  payer: Bytes!
  date: String! # YYYY-MM-DD
  totalDeposits: BigInt!
  totalWithdrawals: BigInt!
  totalUsageSettled: BigInt!
  totalTransactions: BigInt!
  averageMessageCost: BigInt!
  transactions: [PayerRegistryTransaction!]! @derivedFrom(field: "dailyStats")
}
