# XMTP Payer Portal - XMTP Appchain (XMTP Sepolia) Schema

enum MessageType {
  GROUP_MESSAGE
  IDENTITY_UPDATE
}

enum BridgeDirection {
  BASE_TO_XMTP
  XMTP_TO_BASE
}

enum BridgeStatus {
  PENDING
  CONFIRMED
  READY_TO_CLAIM
  CLAIMED
}

# Message tracking for both group messages and identity updates
type Message @entity {
  id: ID! # txHash-logIndex
  type: MessageType!
  sender: Bytes! # Transaction sender
  groupId: Bytes # For group messages
  inboxId: Bytes # For identity updates
  sequenceId: BigInt!
  messageSize: BigInt! # Size of message payload in bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  costAtTime: BigInt # Calculated using rate at block timestamp
}

# Message statistics per user/payer
type MessageStats @entity {
  id: ID! # payer address
  payer: Bytes!
  totalMessages: BigInt!
  totalGroupMessages: BigInt!
  totalIdentityUpdates: BigInt!
  totalCost: BigInt!
  lastMessageAt: BigInt!
  firstMessageAt: BigInt!
}

# Daily message statistics for analytics
type DailyMessageStats @entity {
  id: ID! # payer-date (YYYY-MM-DD)
  payer: Bytes!
  date: String! # YYYY-MM-DD
  messageCount: BigInt!
  totalCost: BigInt!
  averageCostPerMessage: BigInt!
}

# Bridge transaction tracking (XMTP Chain Side)
type BridgeTransaction @entity {
  id: ID! # txHash-logIndex for originating transaction
  direction: BridgeDirection!
  user: Bytes!
  amount: BigInt!
  status: BridgeStatus!
  sourceChain: String!
  targetChain: String!
  sourceTxHash: Bytes!
  targetTxHash: Bytes # Set when bridge is completed/claimed
  messageNum: BigInt # For Arbitrum bridge tracking
  claimableAt: BigInt # When bridge can be claimed (for XMTP->Base)
  initiatedAt: BigInt!
  completedAt: BigInt
  sourceBlockNumber: BigInt!
  targetBlockNumber: BigInt
}

# Cross-chain transaction linking
type CrossChainTransaction @entity {
  id: ID!
  baseTransaction: Bytes # Transaction hash on Base
  xmtpTransaction: Bytes # Related transaction hash on XMTP
  type: String! # "BRIDGE", "MESSAGE_SETTLEMENT"
  user: Bytes!
  status: String!
  initiatedAt: BigInt!
  completedAt: BigInt
}

# Native USDC balance tracking on XMTP chain
type NativeUSDCBalance @entity {
  id: ID! # user address
  user: Bytes!
  balance: BigInt!
  lastUpdatedBlock: BigInt!
  lastUpdatedTimestamp: BigInt!
}

# Native USDC transfer tracking
type NativeUSDCTransfer @entity {
  id: ID! # txHash-logIndex
  from: Bytes!
  to: Bytes!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  relatedTo: String # "BRIDGE", "MESSAGE_PAYMENT", "OTHER"
}

# Global message statistics
type GlobalMessageStats @entity {
  id: ID! # "global"
  totalMessages: BigInt!
  totalGroupMessages: BigInt!
  totalIdentityUpdates: BigInt!
  totalCost: BigInt!
  uniqueSenders: BigInt!
  lastUpdated: BigInt!
}

# Daily global statistics
type DailyGlobalStats @entity {
  id: ID! # date (YYYY-MM-DD)
  date: String! # YYYY-MM-DD
  totalMessages: BigInt!
  totalGroupMessages: BigInt!
  totalIdentityUpdates: BigInt!
  totalCost: BigInt!
  uniqueSenders: BigInt!
  averageCostPerMessage: BigInt!
}
